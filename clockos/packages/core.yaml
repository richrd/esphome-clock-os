esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf

esphome:
  name: ${clockos_device_name}
  friendly_name: ${clockos_device_friendly_name}
  on_boot:
    then:
      # Show main clock page on boot
      - display.page.show: page_main

      # The knob position needs to be initialized on boot, otherwise the value is unpredictable
      # It is set here to a mid-point value (max is 50)
      - lambda: |-
          id(knob).publish_state(25);



# Enable Home Assistant API
api:
  encryption:
    key: !secret clockos_api_key
  reboot_timeout: 0s # Disable API connection-loss reboot

ota:
  - platform: esphome
    password: ${clockos_ota_password}

wifi:
  # networks:
  #   - ssid: !secret wifi_ssid
  #     password: !secret wifi_password
  #   - ssid: !secret wifi_fallback_ssid
  #     password: !secret wifi_fallback_password
  id: wifi0
  reboot_timeout: 0s # Disable WiFi connection-loss reboot

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${clockos_fallback_hotspot_name}
    password: !secret clockos_fallback_hotspot_password

# Fallback WiFi
captive_portal:
  id: clockos_captive_portal


# Enable logging
logger:
  level: INFO  # Disable Debug logging 
  logs:
    graph: ERROR


# Log level selector
select:
  - platform: logger
    name: "Log level"

# Restart button
button:
  - platform: restart
    id: restart_button
    name: "Restart"

# Time
time:
  - platform: sntp
    id: clockos_main_time

# Misc settings, probably will move into a package later
switch:
  - platform: template
    name: "Autoplay"
    id: switch_game_autoplay
    restore_mode: RESTORE_DEFAULT_ON
    lambda: |-
      return id(global_game_autoplay);
    turn_on_action:
      - lambda: 'id(global_game_autoplay) = true;'
    turn_off_action:
      - lambda: 'id(global_game_autoplay) = false;'
