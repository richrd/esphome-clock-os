################################################################
# Hardware
################################################################

# Settings
number:
  - platform: template
    id: screen_brightness
    name: "Screen Brightness"
    icon: "mdi:brightness-percent"
    step: 10
    min_value: 0
    max_value: 100
    optimistic: true
    initial_value: 50
    set_action:
    - lambda: |-
        id(clockos_display).set_contrast(x / 100.0);
  - platform: template
    id: buzzer_volume
    name: "Volume"
    icon: "mdi:speaker"
    step: 5
    min_value: 0
    max_value: 100
    optimistic: true
    initial_value: 2
    set_action:
    - lambda: |-
        id(rtttl_player).set_gain(x / 100.0);


################################################################
# Output / Beeper / Rumbble
################################################################
output:
  - platform: ledc
    pin: ${clockos_pin_beeper}
    id: rttl_pwm_output

rtttl:
  output: rttl_pwm_output
  id: rtttl_player
  gain: 2%

switch:
  - platform: gpio
    id: rumble_output
    pin: ${clockos_pin_rumble_motor}
    name: "Rumble Motor"
  - platform: template
    name: "Sound"
    id: switch_game_sound
    restore_mode: RESTORE_DEFAULT_ON
    lambda: |-
      return id(global_game_sound);
    turn_on_action:
      - lambda: 'id(global_game_sound) = true;'
    turn_off_action:
      - lambda: 'id(global_game_sound) = false;'
  - platform: template
    name: "Rumble"
    id: switch_game_rumble
    restore_mode: RESTORE_DEFAULT_ON
    lambda: |-
      return id(global_game_rumble);
    turn_on_action:
      - lambda: 'id(global_game_rumble) = true;'
    turn_off_action:
      - lambda: 'id(global_game_rumble) = false;'

################################################################
# Output / Display
################################################################
i2c:
  sda: ${clockos_pin_display_sda}
  scl: ${clockos_pin_display_scl}
  frequency: 800kHz

display:
  - platform: ${clockos_display_platform}
    id: clockos_display
    model: ${clockos_display_model}
    address: 0x3C
    invert: false
    contrast: 50%
    auto_clear_enabled: true
    update_interval: 16ms

    pages:

      - id: page_main
        lambda: !include "../screens/clock.cpp"

      - id: page_analog_clock
        lambda: !include "../screens/analog_clock.cpp"



################################################################
# Input / Encoder
################################################################
sensor:
  - platform: rotary_encoder
    id: knob
    name: "Knob"
    internal: true
    pin_a:
      number: ${clockos_pin_encoder_a}
      inverted: true
      mode:
        input: true
        pullup: true
    pin_b:
      number: ${clockos_pin_encoder_b}
      inverted: true
      mode:
        input: true
        pullup: true
    on_anticlockwise:
      - display_menu.up: main_menu
      - lambda: 'id(global_knob_direction) = -1;'
    on_clockwise:
      - display_menu.down: main_menu
      - lambda: 'id(global_knob_direction) = 1;'
    min_value: 0
    max_value: 50


################################################################
# Input / Encoder button
################################################################
binary_sensor:
  - platform: gpio
    id: clockos_knob_button
    name: "Knob Button"
    internal: true
    pin:
      number: ${clockos_pin_encoder_button}
      mode: INPUT_PULLUP
      inverted: True
    filters:
    - delayed_on: 10ms
    on_press:
      # Handle knob button press for menu navigation
      then:
      - if:
          condition:
            # If the main menu is already active (i.e., we're navigating within it)
            - display_menu.is_active: main_menu
          then:
            # Enter (or select the current item) in the main menu
            - display_menu.enter: main_menu
          else:
            if:
              condition:
                # Check that knob button isn't handled already
                - lambda: 'return !id(global_knob_press_handled);'
              then:
                - display_menu.show: main_menu
              else:
                - lambda: 'id(global_knob_pressed) = true;'
    on_double_click:
      - lambda: 'id(global_knob_pressed) = false; id(global_knob_press_handled) = false;'
      - display_menu.hide: main_menu
      - display.page.show: page_main
