################################################################
# Menu
################################################################
graphical_display_menu:
  id: main_menu
  display: clockos_display
  active: false
  on_redraw:
    then:
      component.update: clockos_display
  font: font_sm
  mode: rotary
  menu_item_value: !lambda |-
    // Customize menu value editing visuals
    std::string label = " ";
    if (it->is_item_selected && it->is_menu_editing) {
      label.append(" - ");
      label.append(it->item->get_value_text());
      label.append(" + ");
    } else {
      label.append("[");
      label.append(it->item->get_value_text());
      label.append("]");
    }
    return label;
  items:
    - type: menu
      text: ' Clock ⏵ '
      items:
      - type: back
        text: ' ⏴ Back '
      - type: command
        text: ' Show clock '
        on_value:
          then:
              - display_menu.hide: main_menu
              - display.page.show: page_main
      - type: command
        text: !lambda |-
          return std::string(" Alarm [") + (id(switch_wake_up_alarm).state ? "ON" : "OFF") + "]";
        on_value:
          then:
            - switch.toggle: switch_wake_up_alarm
      - type: number
        text: ' Hour '
        number: feature_alarm_time_hour
      - type: number
        text: ' Minute '
        number: feature_alarm_time_minute
    - type: menu
      text: ' Games ⏵ '
      id: menu_submenu_games
      items:
        - type: back
          text: ' ⏴ Back '
        - type: menu
          id: menu_submenu_demos
          text: ' Demos ⏵ '
          items:
            - type: back
              text: ' ⏴ Back '
    - type: menu
      text: ' Sounds ⏵ '
      id: menu_submenu_sounds
      items:
        - type: back
          text: ' ⏴ Back '
    - type: menu
      id: menu_submenu_control
      text: ' Control ⏵ '
      items:
        - type: back
          text: ' ⏴ Back '
        - type: command
          text: ' Turn off all lights '
          on_value:
            then:
              - homeassistant.service:
                  service: light.turn_off
                  data:
                    entity_id: light.all_lights
    - type: menu
      text: ' Settings ⏵ '
      items:
        - type: back
          text: ' ⏴ Back '
        - type: number
          text: ' Brightness '
          number: screen_brightness
        - type: command
          text: !lambda |-
            return std::string(" Rumble [") + (id(global_game_rumble) ? "ON" : "OFF") + "]";
          on_value:
            then:
              - if:
                  condition:
                    lambda: 'return id(global_game_rumble);'
                  then:
                    - switch.turn_off: switch_game_rumble
                  else:
                    - switch.turn_on: switch_game_rumble
        - type: command
          text: !lambda |-
            return std::string(" Sound [") + (id(global_game_sound) ? "ON" : "OFF") + "]";
          on_value:
            then:
              - if:
                  condition:
                    lambda: 'return id(global_game_sound);'
                  then:
                    - switch.turn_off: switch_game_sound
                  else:
                    - switch.turn_on: switch_game_sound
        - type: number
          text: ' Volume '
          number: buzzer_volume
        - type: menu
          text: ' System ⏵ '
          items:
            - type: back
              text: ' ⏴ Back '
            - type: command
              text: ' Status '
              on_value:
                then:
                    - display_menu.hide: main_menu
                    - display.page.show: page_system
            - type: command
              text: !lambda |-
                return std::string(" Wifi [") + (!id(wifi0).is_disabled() ? "ON" : "OFF") + "]";
              on_value:
                then:
                  - if:
                      condition:
                        lambda: 'return !id(wifi0).is_disabled();'
                      then:
                        - wifi.disable
                      else:
                        - wifi.enable
            - type: command
              text: " Restart "
              on_value:
                then:
                  - logger.log: "Restarting ESP32..."
                  - delay: 100ms
                  - button.press: restart_button
    - type: command
      text: ' Close '
      on_value:
        then:
          - display_menu.hide: main_menu
